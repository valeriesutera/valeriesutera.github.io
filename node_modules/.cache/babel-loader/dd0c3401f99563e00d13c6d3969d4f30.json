{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg; // Parser src into an Object\n\nfunction parse(src) {\n  var obj = {}; // Convert buffer to string\n\n  var lines = src.toString(); // Convert line breaks to same format\n\n  lines = lines.replace(/\\r\\n?/mg, '\\n');\n  var match;\n\n  while ((match = LINE.exec(lines)) != null) {\n    var key = match[1]; // Default undefined or null to empty string\n\n    var value = match[2] || ''; // Remove whitespace\n\n    value = value.trim(); // Check if double quoted\n\n    var maybeQuote = value[0]; // Remove surrounding quotes\n\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2'); // Expand newlines if double quoted\n\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n    } // Add to object\n\n\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _log(message) {\n  console.log(\"[dotenv][DEBUG] \".concat(message));\n}\n\nfunction _resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n} // Populates process.env from .env file\n\n\nfunction config(options) {\n  var dotenvPath = path.resolve(process.cwd(), '.env');\n  var encoding = 'utf8';\n  var debug = Boolean(options && options.debug);\n  var override = Boolean(options && options.override);\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path);\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    var parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {\n      encoding: encoding\n    }));\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key];\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key];\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(\"\\\"\".concat(key, \"\\\" is already defined in `process.env` and WAS overwritten\"));\n          } else {\n            _log(\"\\\"\".concat(key, \"\\\" is already defined in `process.env` and was NOT overwritten\"));\n          }\n        }\n      }\n    });\n    return {\n      parsed: parsed\n    };\n  } catch (e) {\n    if (debug) {\n      _log(\"Failed to load \".concat(dotenvPath, \" \").concat(e.message));\n    }\n\n    return {\n      error: e\n    };\n  }\n}\n\nvar DotenvModule = {\n  config: config,\n  parse: parse\n};\nmodule.exports.config = DotenvModule.config;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports = DotenvModule;","map":null,"metadata":{},"sourceType":"script"}