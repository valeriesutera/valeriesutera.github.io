{"ast":null,"code":"import _regeneratorRuntime from \"/Users/valeriesutera/Documents/website/valeriesutera.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/valeriesutera/Documents/website/valeriesutera.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/valeriesutera/Documents/website/valeriesutera.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/valeriesutera/Documents/website/valeriesutera.github.io/src/InstaFeeds.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Feed from './Feed';\nimport './instaFeeds.css';\nexport function InstaFeeds(_ref) {\n  var _this = this;\n\n  var token = _ref.token,\n      limit = _ref.limit;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      feeds = _useState2[0],\n      setFeedsData = _useState2[1]; //use useRef to store the latest value of the prop without firing the effect\n\n\n  var tokenProp = useRef(token);\n  tokenProp.current = token;\n  console.log(props.limit);\n  console.log(props.token);\n  useEffect(function () {\n    // this is to avoid memory leaks\n    var abortController = new AbortController();\n\n    function fetchInstagramPost() {\n      return _fetchInstagramPost.apply(this, arguments);\n    } // manually call the fecth function \n\n\n    function _fetchInstagramPost() {\n      _fetchInstagramPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  axios.get(\"https://graph.instagram.com/me/media?fields=id,media_type,media_url,caption&limit=\".concat(props.limit, \"&access_token=\").concat(props.token)).then(function (resp) {\n                    setFeedsData(resp.data.data);\n                  });\n                } catch (err) {\n                  console.log('error', err);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchInstagramPost.apply(this, arguments);\n    }\n\n    fetchInstagramPost();\n    return function () {\n      // cancel pending fetch request on component unmount\n      abortController.abort();\n    };\n  }, [props.limit, props.token]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, feeds.map(function (feed) {\n    return /*#__PURE__*/React.createElement(Feed, {\n      key: feed.id,\n      feed: feed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    });\n  }));\n}\nexport default InstaFeeds;","map":{"version":3,"sources":["/Users/valeriesutera/Documents/website/valeriesutera.github.io/src/InstaFeeds.js"],"names":["React","useState","useEffect","useRef","axios","Feed","InstaFeeds","token","limit","feeds","setFeedsData","tokenProp","current","console","log","props","abortController","AbortController","fetchInstagramPost","get","then","resp","data","err","abort","map","feed","id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,kBAAP;AAEA,OAAO,SAASC,UAAT,OAAoC;AAAA;;AAAA,MAAdC,KAAc,QAAdA,KAAc;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAAA,kBACTP,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,MAChCQ,KADgC;AAAA,MACzBC,YADyB,kBAEvC;;;AACA,MAAMC,SAAS,GAAGR,MAAM,CAACI,KAAD,CAAxB;AACAI,EAAAA,SAAS,CAACC,OAAV,GAAoBL,KAApB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACP,KAAlB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACR,KAAlB;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA,QAAMc,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAFY,aAIGC,kBAJH;AAAA;AAAA,MAgBZ;;;AAhBY;AAAA,qFAIZ;AAAA;AAAA;AAAA;AAAA;AACE,oBAAG;AACDd,kBAAAA,KAAK,CACAe,GADL,6FAC8FJ,KAAK,CAACP,KADpG,2BAC0HO,KAAK,CAACR,KADhI,GAEKa,IAFL,CAEU,UAACC,IAAD,EAAU;AACZX,oBAAAA,YAAY,CAACW,IAAI,CAACC,IAAL,CAAUA,IAAX,CAAZ;AACH,mBAJL;AAKD,iBAND,CAME,OAAOC,GAAP,EAAY;AACVV,kBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,GAArB;AACH;;AATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJY;AAAA;AAAA;;AAiBZL,IAAAA,kBAAkB;AAElB,WAAO,YAAM;AACT;AACAF,MAAAA,eAAe,CAACQ,KAAhB;AACH,KAHD;AAIH,GAvBQ,EAuBN,CAACT,KAAK,CAACP,KAAP,EAAcO,KAAK,CAACR,KAApB,CAvBM,CAAT;AAyBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,KAAK,CAACgB,GAAN,CAAU,UAACC,IAAD;AAAA,wBACP,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO;AAAA,GAAV,CADL,CADJ;AAOH;AAED,eAAepB,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport Feed from './Feed'\n\nimport './instaFeeds.css'\n\nexport function InstaFeeds ({token,limit}) {\n    const [feeds, setFeedsData] = useState([])\n    //use useRef to store the latest value of the prop without firing the effect\n    const tokenProp = useRef(token);\n    tokenProp.current = token;\n\n    console.log(props.limit)\n    console.log(props.token)\n    useEffect(() => {\n        // this is to avoid memory leaks\n        const abortController = new AbortController();\n\n        async function fetchInstagramPost () {\n          try{\n            axios\n                .get(`https://graph.instagram.com/me/media?fields=id,media_type,media_url,caption&limit=${props.limit}&access_token=${props.token}`)\n                .then((resp) => {\n                    setFeedsData(resp.data.data)\n                })\n          } catch (err) {\n              console.log('error', err)\n          }\n        }\n        \n        // manually call the fecth function \n        fetchInstagramPost();\n  \n        return () => {\n            // cancel pending fetch request on component unmount\n            abortController.abort(); \n        };\n    }, [props.limit, props.token])\n\n    return (\n        <div className=\"container\">\n            {feeds.map((feed) => (\n                <Feed key={feed.id} feed={feed} />\n            ))}\n        </div>\n    );\n}\n\nexport default InstaFeeds;"]},"metadata":{},"sourceType":"module"}