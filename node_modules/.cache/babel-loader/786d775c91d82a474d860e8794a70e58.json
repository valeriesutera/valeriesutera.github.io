{"ast":null,"code":"var _jsxFileName = \"/Users/valeriesutera/Documents/website/valeriesutera.github.io/src/InstaFeeds.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Feed from './Feed';\nimport './instaFeeds.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InstaFeeds = _ref => {\n  _s();\n\n  let {\n    token,\n    ...props\n  } = _ref;\n  const [feeds, setFeedsData] = useState([]); //use useRef to store the latest value of the prop without firing the effect\n\n  const tokenProp = useRef(token);\n  tokenProp.current = token;\n  useEffect(() => {\n    // this is to avoid memory leaks\n    const abortController = new AbortController();\n\n    async function fetchInstagramPost() {\n      try {\n        axios.get(`https://graph.instagram.com/me/media?fields=id,media_type,media_url,caption&limit=${props.limit}&access_token=${props.token}`).then(resp => {\n          setFeedsData(resp.data.data);\n        });\n      } catch (err) {\n        console.log('error', err);\n      }\n    } // manually call the fecth function \n\n\n    fetchInstagramPost();\n    return () => {\n      // cancel pending fetch request on component unmount\n      abortController.abort();\n    };\n  }, [props.limit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: feeds.map(feed => /*#__PURE__*/_jsxDEV(Feed, {\n      feed: feed\n    }, feed.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InstaFeeds, \"7Lr/QVuyl5mvaUDQyaq7AGnY33Y=\");\n\n_c = InstaFeeds;\nexport default InstaFeeds;\n\nvar _c;\n\n$RefreshReg$(_c, \"InstaFeeds\");","map":{"version":3,"sources":["/Users/valeriesutera/Documents/website/valeriesutera.github.io/src/InstaFeeds.js"],"names":["React","useState","useEffect","useRef","axios","Feed","InstaFeeds","token","props","feeds","setFeedsData","tokenProp","current","abortController","AbortController","fetchInstagramPost","get","limit","then","resp","data","err","console","log","abort","map","feed","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,kBAAP;;;AAEA,MAAMC,UAAU,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAACC,IAAAA,KAAD;AAAQ,OAAGC;AAAX,GAAsB;AACtC,QAAM,CAACC,KAAD,EAAQC,YAAR,IAAwBT,QAAQ,CAAC,EAAD,CAAtC,CADsC,CAEtC;;AACA,QAAMU,SAAS,GAAGR,MAAM,CAACI,KAAD,CAAxB;AACAI,EAAAA,SAAS,CAACC,OAAV,GAAoBL,KAApB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMW,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAEA,mBAAeC,kBAAf,GAAqC;AACnC,UAAG;AACDX,QAAAA,KAAK,CACAY,GADL,CACU,qFAAoFR,KAAK,CAACS,KAAM,iBAAgBT,KAAK,CAACD,KAAM,EADtI,EAEKW,IAFL,CAEWC,IAAD,IAAU;AACZT,UAAAA,YAAY,CAACS,IAAI,CAACC,IAAL,CAAUA,IAAX,CAAZ;AACH,SAJL;AAKD,OAND,CAME,OAAOC,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACH;AACF,KAdW,CAgBZ;;;AACAN,IAAAA,kBAAkB;AAElB,WAAO,MAAM;AACT;AACAF,MAAAA,eAAe,CAACW,KAAhB;AACH,KAHD;AAIH,GAvBQ,EAuBN,CAAChB,KAAK,CAACS,KAAP,CAvBM,CAAT;AAyBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKR,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBACP,QAAC,IAAD;AAAoB,MAAA,IAAI,EAAEA;AAA1B,OAAWA,IAAI,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAtCD;;GAAMrB,U;;KAAAA,U;AAwCN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport Feed from './Feed'\n\nimport './instaFeeds.css'\n\nconst InstaFeeds = ({token, ...props}) => {\n    const [feeds, setFeedsData] = useState([])\n    //use useRef to store the latest value of the prop without firing the effect\n    const tokenProp = useRef(token);\n    tokenProp.current = token;\n\n    useEffect(() => {\n        // this is to avoid memory leaks\n        const abortController = new AbortController();\n\n        async function fetchInstagramPost () {\n          try{\n            axios\n                .get(`https://graph.instagram.com/me/media?fields=id,media_type,media_url,caption&limit=${props.limit}&access_token=${props.token}`)\n                .then((resp) => {\n                    setFeedsData(resp.data.data)\n                })\n          } catch (err) {\n              console.log('error', err)\n          }\n        }\n        \n        // manually call the fecth function \n        fetchInstagramPost();\n  \n        return () => {\n            // cancel pending fetch request on component unmount\n            abortController.abort(); \n        };\n    }, [props.limit])\n\n    return (\n        <div className=\"container\">\n            {feeds.map((feed) => (\n                <Feed key={feed.id} feed={feed} />\n            ))}\n        </div>\n    );\n}\n\nexport default InstaFeeds;"]},"metadata":{},"sourceType":"module"}